{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8455250,"sourceType":"datasetVersion","datasetId":5039237}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-22T14:57:22.400830Z","iopub.execute_input":"2024-05-22T14:57:22.401572Z","iopub.status.idle":"2024-05-22T14:57:22.418966Z","shell.execute_reply.started":"2024-05-22T14:57:22.401539Z","shell.execute_reply":"2024-05-22T14:57:22.418045Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/bevel-mfs-coupled-fs2048-27x-27y-27z-eo-all-mat/bevel_mfs_coupled_fs2048_27x_27y_27z_eo_all.mat\n","output_type":"stream"}]},{"cell_type":"code","source":"import scipy.io\nimport pandas as pd","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:57:25.720547Z","iopub.execute_input":"2024-05-22T14:57:25.721214Z","iopub.status.idle":"2024-05-22T14:57:25.778019Z","shell.execute_reply.started":"2024-05-22T14:57:25.721176Z","shell.execute_reply":"2024-05-22T14:57:25.777281Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"file_path = \"/kaggle/input/bevel-mfs-coupled-fs2048-27x-27y-27z-eo-all-mat/bevel_mfs_coupled_fs2048_27x_27y_27z_eo_all.mat\"\ndf= scipy.io.loadmat(file_path)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:57:25.960182Z","iopub.execute_input":"2024-05-22T14:57:25.961072Z","iopub.status.idle":"2024-05-22T14:57:29.445467Z","shell.execute_reply.started":"2024-05-22T14:57:25.961040Z","shell.execute_reply":"2024-05-22T14:57:29.444631Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:26:06.313589Z","iopub.execute_input":"2024-05-22T14:26:06.313942Z","iopub.status.idle":"2024-05-22T14:26:06.326430Z","shell.execute_reply.started":"2024-05-22T14:26:06.313912Z","shell.execute_reply":"2024-05-22T14:26:06.325480Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"{'__header__': b'MATLAB 5.0 MAT-file, Platform: PCWIN64, Created on: Sun Jan 14 23:06:30 2024',\n '__version__': '1.0',\n '__globals__': [],\n 'bg_mfs_27x_27y_27z_30s': array([[  3.60406  ,  -0.0694835,   1.96953  , ...,  -4.92852  ,\n          -1.06204  ,  -3.15336  ],\n        [  1.1152   ,   0.954336 ,  -0.412014 , ..., -14.9024   ,\n           2.3964   ,  -0.928266 ],\n        [ -0.963937 ,   0.773058 ,  -0.46902  , ...,   2.70827  ,\n          -0.825266 ,   2.53328  ],\n        ...,\n        [  2.72128  ,  -0.490284 ,   1.11379  , ...,   3.01822  ,\n          -0.124835 ,  -1.65456  ],\n        [  1.88743  ,  -1.04309  ,   0.166072 , ...,  -0.634442 ,\n           1.33778  ,  -3.89464  ],\n        [ -0.0363668,   0.0581092,  -0.501747 , ...,   3.37628  ,\n           1.04348  ,   4.83966  ]]),\n 'bg_mfs_27x_27y_27z_30s_ceeo': array([[ 11.36188306,   0.56339061,  -1.48545005, ...,  22.26257277,\n          -1.85670185,   5.64019801],\n        [ 11.36188306,   0.56339061,  -1.48545005, ...,  22.26257277,\n          -1.85670185,   5.64019801],\n        [ 11.36188306,   0.56339061,  -1.48545005, ...,  22.26257277,\n          -1.85670185,   5.64019801],\n        ...,\n        [  7.25808003,   0.21206655,   1.23926303, ..., -14.60148979,\n           2.26870753,  -5.76818205],\n        [  7.25808003,   0.21206655,   1.23926303, ..., -14.60148979,\n           2.26870753,  -5.76818205],\n        [  7.25808003,   0.21206655,   1.23926303, ..., -14.60148979,\n           2.26870753,  -5.76818205]]),\n 'bg_mfs_27x_27y_27z_30s_eo': array([[ 4.71775782e+00,  9.64471976e-01,  1.09350450e+00, ...,\n          2.35429289e+02,  4.86626746e+00,  8.85002159e+00],\n        [ 4.71775782e+00,  9.64471976e-01,  1.09350450e+00, ...,\n          2.35429289e+02,  4.86626746e+00,  8.85002159e+00],\n        [ 2.75351907e+00,  2.89164883e-02, -6.84960313e-03, ...,\n          8.20419478e+01, -1.09562139e+01,  4.11965934e+00],\n        ...,\n        [ 8.83587635e+00,  1.30632816e-01,  1.14213482e+00, ...,\n          1.16772451e+01, -1.25706640e+00, -7.66910402e+00],\n        [ 1.88743000e+00, -1.04309000e+00,  1.66072000e-01, ...,\n         -6.34442000e-01,  1.33778000e+00, -3.89464000e+00],\n        [ 1.88743000e+00, -1.04309000e+00,  1.66072000e-01, ...,\n         -6.34442000e-01,  1.33778000e+00, -3.89464000e+00]]),\n 'bg_mfs_27x_27y_27z_30s_eo123': array([[  3.60406   ,  -0.0694835 ,   1.96953   , ...,  -4.92852   ,\n          -1.06204   ,  -3.15336   ],\n        [  1.1152    ,   0.954336  ,  -0.412014  , ..., -14.9024    ,\n           2.3964    ,  -0.928266  ],\n        [ -0.08519808,   0.77323767,   0.58771549, ...,  -8.56392769,\n          25.10754935,   5.84895949],\n        ...,\n        [  2.72128   ,  -0.490284  ,   1.11379   , ...,   3.01822   ,\n          -0.124835  ,  -1.65456   ],\n        [  1.88743   ,  -1.04309   ,   0.166072  , ...,  -0.634442  ,\n           1.33778   ,  -3.89464   ],\n        [ -0.0363668 ,   0.0581092 ,  -0.501747  , ...,   3.37628   ,\n           1.04348   ,   4.83966   ]]),\n 'bg_mfs_27x_27y_27z_30s_eo23': array([[  3.60406   ,  -0.0694835 ,   1.96953   , ...,  -4.92852   ,\n          -1.06204   ,  -3.15336   ],\n        [  1.1152    ,   0.954336  ,  -0.412014  , ..., -14.9024    ,\n           2.3964    ,  -0.928266  ],\n        [  0.0289839 ,   0.03731039,  -0.1215043 , ..., -25.49210155,\n           3.49734614,  -0.90320328],\n        ...,\n        [  2.72128   ,  -0.490284  ,   1.11379   , ...,   3.01822   ,\n          -0.124835  ,  -1.65456   ],\n        [  1.88743   ,  -1.04309   ,   0.166072  , ...,  -0.634442  ,\n           1.33778   ,  -3.89464   ],\n        [ -0.0363668 ,   0.0581092 ,  -0.501747  , ...,   3.37628   ,\n           1.04348   ,   4.83966   ]]),\n 'label_mfs': array([[1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [1],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [2],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3],\n        [3]], dtype=uint8)}"},"metadata":{}}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-22T13:32:15.601795Z","iopub.execute_input":"2024-05-22T13:32:15.602147Z","iopub.status.idle":"2024-05-22T13:32:15.630186Z","shell.execute_reply.started":"2024-05-22T13:32:15.602117Z","shell.execute_reply":"2024-05-22T13:32:15.628861Z"},"trusted":true},"execution_count":10,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[10], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m image_path \u001b[38;5;241m=\u001b[39m \u001b[43mX_train_temp\u001b[49m[\u001b[38;5;241m70\u001b[39m]  \u001b[38;5;66;03m# Assuming X_train_temp is a list of image paths\u001b[39;00m\n\u001b[1;32m      2\u001b[0m img \u001b[38;5;241m=\u001b[39m Image\u001b[38;5;241m.\u001b[39mopen(image_path)\n\u001b[1;32m      3\u001b[0m plt\u001b[38;5;241m.\u001b[39mimshow(img)\n","\u001b[0;31mNameError\u001b[0m: name 'X_train_temp' is not defined"],"ename":"NameError","evalue":"name 'X_train_temp' is not defined","output_type":"error"}]},{"cell_type":"code","source":"data=pd.DataFrame(df['bg_mfs_27x_27y_27z_30s_eo123'])","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:57:46.280967Z","iopub.execute_input":"2024-05-22T14:57:46.281837Z","iopub.status.idle":"2024-05-22T14:57:46.286526Z","shell.execute_reply.started":"2024-05-22T14:57:46.281796Z","shell.execute_reply":"2024-05-22T14:57:46.285472Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.signal import spectrogram\nfrom sklearn.model_selection import train_test_split\nimport os\nfrom PIL import Image\n\n# Define segment size and step size\nsegment_size = 2048\nstep_size = 1024\n\n# Function to generate and save spectrogram image\ndef generate_spectrogram_image(segment_signal, label, segment_id, output_dir, image_size=(100, 100)):\n    # Sampling frequency\n    fs = 2048  # 2048 samples per second\n    \n    # Generate the spectrogram\n    frequencies, times, Sxx = spectrogram(segment_signal, fs)\n    \n    # Plot the spectrogram\n    plt.figure(figsize=(5, 5))\n    plt.axis('off')\n    plt.pcolormesh(times, frequencies, 10 * np.log10(Sxx), shading='gouraud')\n    \n    # Save the spectrogram image temporarily\n    temp_image_path = 'temp_spectrogram.png'\n    plt.savefig(temp_image_path, bbox_inches='tight', pad_inches=0)  # Save the image\n    plt.close()  # Close the plot to release memory\n    \n    # Open the saved image and resize it\n    img = Image.open(temp_image_path)\n    img_resized = img.resize(image_size, Image.ANTIALIAS)\n    \n    # Define the final image path and save the resized image\n    image_filename = f\"spectrogram_label_{label}_segment_{segment_id}.png\"\n    image_path = os.path.join(output_dir, image_filename)\n    img_resized.save(image_path)\n    \n    # Remove the temporary image\n    os.remove(temp_image_path)\n    \n    return image_path\n\n# Initialize lists to store spectrogram images and labels\nspectrogram_images = []\nlabels = []\n# Create an output directory for the images\noutput_dir = 'spectrogram_images'\nos.makedirs(output_dir, exist_ok=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:57:37.521460Z","iopub.execute_input":"2024-05-22T14:57:37.521854Z","iopub.status.idle":"2024-05-22T14:57:37.578995Z","shell.execute_reply.started":"2024-05-22T14:57:37.521824Z","shell.execute_reply":"2024-05-22T14:57:37.578248Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\n# Loop over each column in the cooe DataFrame\nfor i in range(data.shape[1]):\n    # Assign label based on the current iteration\n    label = (i // 27) + 1  # Divide by 27 and add 1 to get labels 1, 2, 3 for each group of 27\n    \n    # Extract signal data from the current column\n    signal_data = np.array(data[i])\n    \n    # Extract segments from the signal data\n    for start in range(0, len(signal_data) - segment_size + 1, step_size):\n        segment_signal = signal_data[start:start + segment_size]\n        segment_signal = segment_signal.flatten()  # Flatten the segment\n        \n        # Generate and save spectrogram image\n        image_path = generate_spectrogram_image(segment_signal, label, start, output_dir)\n        \n        # Append the image path and label to the respective lists\n        spectrogram_images.append(image_path)\n        labels.append(label)\n\n\nfrom sklearn.preprocessing import LabelEncoder \nimport tensorflow \nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn import preprocessing\nY=np.array(labels)\n\nencoder=LabelEncoder()\nencoder.fit(labels)\nencoded_Y=encoder.transform(labels)\nOHE_Y=to_categorical(encoded_Y)\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:58:07.334074Z","iopub.execute_input":"2024-05-22T14:58:07.334487Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_938/587389018.py:32: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use LANCZOS or Resampling.LANCZOS instead.\n  img_resized = img.resize(image_size, Image.ANTIALIAS)\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.20,shuffle=True)\n\n# Split the temporary data into validation and testing data (50% for each)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50,shuffle=True)\n\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nimport numpy as np\nfrom tensorflow.keras.preprocessing.image import img_to_array, load_img\nfrom sklearn.model_selection import train_test_split\ninput_shape = (100, 100, 3)  # Assuming RGB images of size 100x100\nX_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.20,shuffle=True)\n\n# Split the temporary data into validation and testing data (50% for each)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50,shuffle=True)\n\n\n# Load and preprocess images for training data\nX_train_temp_images = []\nfor img_path in X_train_temp:\n    img = load_img(img_path, target_size=input_shape[:2])\n    img_array = img_to_array(img)\n    X_train_temp_images.append(img_array)\n\n# Convert lists to arrays for training data\nX_train_temp_images = np.array(X_train_temp_images)\ny_train_temp = np.array(y_train_temp)\n\n# Load and preprocess images for validation data\nX_valid_images = []\nfor img_path in X_valid:\n    img = load_img(img_path, target_size=input_shape[:2])\n    img_array = img_to_array(img)\n    X_valid_images.append(img_array)\n\n# Convert lists to arrays for validation data\nX_valid_images = np.array(X_valid_images)\ny_valid = np.array(y_valid)\n\n# Load and preprocess images for test data\nX_test_images = []\nfor img_path in X_test:\n    img = load_img(img_path, target_size=input_shape[:2])\n    img_array = img_to_array(img)\n    X_test_images.append(img_array)\n\n# Convert lists to arrays for test data\nX_test_images = np.array(X_test_images)\ny_test = np.array(y_test)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T14:42:44.538444Z","iopub.execute_input":"2024-05-22T14:42:44.538784Z","iopub.status.idle":"2024-05-22T14:42:47.964793Z","shell.execute_reply.started":"2024-05-22T14:42:44.538753Z","shell.execute_reply":"2024-05-22T14:42:47.963998Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"X_train_temp_images.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-22T13:48:43.565329Z","iopub.execute_input":"2024-05-22T13:48:43.565634Z","iopub.status.idle":"2024-05-22T13:48:43.571791Z","shell.execute_reply.started":"2024-05-22T13:48:43.565591Z","shell.execute_reply":"2024-05-22T13:48:43.570846Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"(3823, 100, 100, 3)"},"metadata":{}}]},{"cell_type":"code","source":"y_train_temp.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-22T11:08:43.245052Z","iopub.execute_input":"2024-05-22T11:08:43.245364Z","iopub.status.idle":"2024-05-22T11:08:43.254858Z","shell.execute_reply.started":"2024-05-22T11:08:43.245333Z","shell.execute_reply":"2024-05-22T11:08:43.253921Z"},"trusted":true},"execution_count":190,"outputs":[{"execution_count":190,"output_type":"execute_result","data":{"text/plain":"(3823, 3)"},"metadata":{}}]},{"cell_type":"code","source":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n\n# Define your spectrogram images and labels\n# X_train_temp, X_valid, X_test are lists of image paths\n# y_train_temp, y_valid, y_test are numpy arrays of labels\n\n# Define input shape\n\n# Number of classes\nnum_classes = 3\n\n# Define the model\nmodel = Sequential()\n\n# Add convolutional layers\nmodel.add(Conv2D(128, (3, 3), activation='relu', input_shape=input_shape))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\n\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\n\n# Flatten the output for fully connected layers\nmodel.add(Flatten())\n\n# Add dropout layer\nmodel.add(Dropout(0.2))\n\n# Add fully connected layers\nmodel.add(Dense(64, activation='relu'))\n\n# Output layer\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Print the model summary\nmodel.summary()\n\n# Define callbacks\nearly_stop = EarlyStopping(monitor='val_loss', patience=10, verbose=1, restore_best_weights=True)\n# reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=1e-6, verbose=1)\n\nhistory = model.fit(X_train_temp_images, y_train_temp, batch_size=32, epochs=150, \n                    validation_data=(X_valid_images, y_valid), callbacks=[early_stop])\n","metadata":{"execution":{"iopub.status.busy":"2024-05-22T11:08:43.255951Z","iopub.execute_input":"2024-05-22T11:08:43.256272Z","iopub.status.idle":"2024-05-22T11:09:24.030283Z","shell.execute_reply.started":"2024-05-22T11:08:43.256229Z","shell.execute_reply":"2024-05-22T11:09:24.029423Z"},"trusted":true},"execution_count":191,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_7\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_7\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d_28 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m98\u001b[0m, \u001b[38;5;34m98\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │         \u001b[38;5;34m3,584\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_28 (\u001b[38;5;33mMaxPooling2D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m49\u001b[0m, \u001b[38;5;34m49\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_29 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m47\u001b[0m, \u001b[38;5;34m47\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m73,792\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_29 (\u001b[38;5;33mMaxPooling2D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m23\u001b[0m, \u001b[38;5;34m23\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_30 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m21\u001b[0m, \u001b[38;5;34m21\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │        \u001b[38;5;34m18,464\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_30 (\u001b[38;5;33mMaxPooling2D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m10\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_31 (\u001b[38;5;33mConv2D\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m32\u001b[0m)       │         \u001b[38;5;34m9,248\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_31 (\u001b[38;5;33mMaxPooling2D\u001b[0m) │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m32\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_7 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_7 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_14 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)             │        \u001b[38;5;34m32,832\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_15 (\u001b[38;5;33mDense\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)              │           \u001b[38;5;34m195\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ conv2d_28 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">98</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">98</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │         <span style=\"color: #00af00; text-decoration-color: #00af00\">3,584</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_28 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">49</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">49</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_29 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">47</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">47</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,792</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_29 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">23</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">23</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_30 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">21</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">21</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,464</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_30 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ conv2d_31 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)       │         <span style=\"color: #00af00; text-decoration-color: #00af00\">9,248</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ max_pooling2d_31 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>) │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)             │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,832</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_15 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">195</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m138,115\u001b[0m (539.51 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">138,115</span> (539.51 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m138,115\u001b[0m (539.51 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">138,115</span> (539.51 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"Epoch 1/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 37ms/step - accuracy: 0.5510 - loss: 10.7182 - val_accuracy: 0.9561 - val_loss: 0.4635\nEpoch 2/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.8588 - loss: 2.6276 - val_accuracy: 0.9477 - val_loss: 0.8109\nEpoch 3/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 12ms/step - accuracy: 0.9282 - loss: 3.3973 - val_accuracy: 0.9979 - val_loss: 0.0160\nEpoch 4/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9585 - loss: 3.9776 - val_accuracy: 0.9561 - val_loss: 3.5309\nEpoch 5/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9502 - loss: 19.6152 - val_accuracy: 0.9498 - val_loss: 12.7977\nEpoch 6/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9671 - loss: 7.8219 - val_accuracy: 0.9728 - val_loss: 5.5399\nEpoch 7/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9726 - loss: 11.8971 - val_accuracy: 0.9854 - val_loss: 5.6228\nEpoch 8/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9353 - loss: 123.1333 - val_accuracy: 0.9854 - val_loss: 24.0926\nEpoch 9/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9790 - loss: 34.6203 - val_accuracy: 0.9895 - val_loss: 4.7678\nEpoch 10/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9826 - loss: 44.7257 - val_accuracy: 0.9833 - val_loss: 22.3615\nEpoch 11/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9800 - loss: 23.7679 - val_accuracy: 0.9916 - val_loss: 3.0514\nEpoch 12/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9964 - loss: 3.0005 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 13/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9989 - loss: 0.5012 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 14/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9978 - loss: 1.4350 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 15/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9982 - loss: 0.6573 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 16/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9980 - loss: 0.8927 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 17/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9982 - loss: 1.2434 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 18/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9969 - loss: 3.1668 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 19/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9980 - loss: 0.9091 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 20/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 12ms/step - accuracy: 0.9951 - loss: 2.8593 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 21/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 12ms/step - accuracy: 0.9974 - loss: 1.9149 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 22/150\n\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 12ms/step - accuracy: 0.9975 - loss: 2.6525 - val_accuracy: 1.0000 - val_loss: 0.0000e+00\nEpoch 22: early stopping\nRestoring model weights from the end of the best epoch: 12.\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.plot(history.history['accuracy'], label='Training Accuracy')\nplt.plot(history.history['val_accuracy'], label='Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T11:09:24.031981Z","iopub.execute_input":"2024-05-22T11:09:24.032268Z","iopub.status.idle":"2024-05-22T11:09:24.340474Z","shell.execute_reply.started":"2024-05-22T11:09:24.032244Z","shell.execute_reply":"2024-05-22T11:09:24.339635Z"},"trusted":true},"execution_count":192,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import seaborn as sns\nfrom sklearn.metrics import accuracy_score, confusion_matrix\ndef inv_transform_result(y_pred):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred)\n    return y_pred\n    \n    \n    \ny_pred=model.predict(X_test_images)\n\n\nY_pred=inv_transform_result(y_pred)\nY_test=inv_transform_result(y_test)\n\nfrom sklearn.decomposition import PCA\n# Calculate accuracy\naccuracy = accuracy_score(Y_test, Y_pred)\nprint(accuracy)\n\n# Calculate confusion matrix\nconfusion_mat = confusion_matrix(Y_test, Y_pred)\n\n# Convert confusion matrix into percentages\nconfusion_mat_percent = confusion_mat.astype('float') / confusion_mat.sum(axis=1)[:, np.newaxis] * 100\n\n# Visualize confusion matrix using heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(confusion_mat_percent, annot=True, fmt=\".2f\", cmap=\"Blues\", cbar=False)\nplt.title(\"Confusion Matrix (Percentage)\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-05-22T11:09:24.341604Z","iopub.execute_input":"2024-05-22T11:09:24.341901Z","iopub.status.idle":"2024-05-22T11:09:25.305009Z","shell.execute_reply.started":"2024-05-22T11:09:24.341875Z","shell.execute_reply":"2024-05-22T11:09:25.304146Z"},"trusted":true},"execution_count":193,"outputs":[{"name":"stdout","text":"\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 24ms/step\n1.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred)\n    return y_pred\n\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    # Ensure the lengths of spectrogram_images and OHE_Y are consistent\n    if len(spectrogram_images) != len(OHE_Y):\n        raise ValueError(f\"Inconsistent number of samples: {len(spectrogram_images)} images, {len(OHE_Y)} labels\")\n\n    for i in range(num_iterations):\n        # Split the dataset into training and temporary data (80% for training, 20% for temporary data)\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.20, shuffle=True)\n\n        # Split the temporary data into validation and testing data (50% for each)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        # Load and preprocess images for test data\n        X_test_images = []\n        for img_path in X_test:\n            img = load_img(img_path, target_size=input_shape[:2])\n            img_array = img_to_array(img)\n            X_test_images.append(img_array)\n\n        # Convert lists to arrays for test data\n        X_test_images = np.array(X_test_images)\n        y_test = np.array(y_test)\n        \n        # Predict\n        y_pred = model.predict(X_test_images)\n        \n        # Inverse transform\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        # Calculate metrics\n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    # Calculate mean and standard deviation for metrics\n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    mean_recall = np.mean(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_precision = np.std(precisions)\n    std_dev_recall = np.std(recalls)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: model, spectrogram_images, OHE_Y, encoder, input_shape\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-22T11:09:25.308235Z","iopub.execute_input":"2024-05-22T11:09:25.308628Z","iopub.status.idle":"2024-05-22T11:09:30.660630Z","shell.execute_reply.started":"2024-05-22T11:09:25.308602Z","shell.execute_reply":"2024-05-22T11:09:30.659714Z"},"trusted":true},"execution_count":194,"outputs":[{"name":"stdout","text":"\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \n\u001b[1m15/15\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step \nMean Accuracy: 1.0\nStandard Deviation of Accuracy: 0.0\nMean Precision: 1.0\nStandard Deviation of Precision: 0.0\nMean Recall: 1.0\nStandard Deviation of Recall: 0.0\nMean F1 Score: 1.0\nStandard Deviation of F1 Score: 0.0\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train_temp_images.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-22T11:09:30.661754Z","iopub.execute_input":"2024-05-22T11:09:30.662051Z","iopub.status.idle":"2024-05-22T11:09:30.668963Z","shell.execute_reply.started":"2024-05-22T11:09:30.662025Z","shell.execute_reply":"2024-05-22T11:09:30.667876Z"},"trusted":true},"execution_count":195,"outputs":[{"execution_count":195,"output_type":"execute_result","data":{"text/plain":"(3823, 100, 100, 3)"},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred)\n    return y_pred\n\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    # Ensure the lengths of spectrogram_images and OHE_Y are consistent\n    if len(spectrogram_images) != len(OHE_Y):\n        raise ValueError(f\"Inconsistent number of samples: {len(spectrogram_images)} images, {len(OHE_Y)} labels\")\n\n    for i in range(num_iterations):\n        # Split the dataset into training and temporary data (80% for training, 20% for temporary data)\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.30, shuffle=True)\n\n        # Split the temporary data into validation and testing data (50% for each)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        # Load and preprocess images for test data\n        X_test_images = []\n        for img_path in X_test:\n            img = load_img(img_path, target_size=input_shape[:2])\n            img_array = img_to_array(img)\n            X_test_images.append(img_array)\n\n        # Convert lists to arrays for test data\n        X_test_images = np.array(X_test_images)\n        y_test = np.array(y_test)\n        \n        # Predict\n        y_pred = model.predict(X_test_images)\n        \n        # Inverse transform\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        # Calculate metrics\n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    # Calculate mean and standard deviation for metrics\n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    mean_recall = np.mean(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_precision = np.std(precisions)\n    std_dev_recall = np.std(recalls)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: model, spectrogram_images, OHE_Y, encoder, input_shape\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-22T11:09:30.670446Z","iopub.execute_input":"2024-05-22T11:09:30.670793Z","iopub.status.idle":"2024-05-22T11:09:39.944597Z","shell.execute_reply.started":"2024-05-22T11:09:30.670767Z","shell.execute_reply":"2024-05-22T11:09:39.943633Z"},"trusted":true},"execution_count":196,"outputs":[{"name":"stdout","text":"\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m23/23\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\nMean Accuracy: 0.998744769874477\nStandard Deviation of Accuracy: 0.0013157574800636853\nMean Precision: 0.9987550262896203\nStandard Deviation of Precision: 0.0012984807396408387\nMean Recall: 0.998735057047902\nStandard Deviation of Recall: 0.0013253630460555417\nMean F1 Score: 0.9987415955021645\nStandard Deviation of F1 Score: 0.0013151568198978038\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred)\n    return y_pred\n\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    # Ensure the lengths of spectrogram_images and OHE_Y are consistent\n    if len(spectrogram_images) != len(OHE_Y):\n        raise ValueError(f\"Inconsistent number of samples: {len(spectrogram_images)} images, {len(OHE_Y)} labels\")\n\n    for i in range(num_iterations):\n        # Split the dataset into training and temporary data (80% for training, 20% for temporary data)\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.40, shuffle=True)\n\n        # Split the temporary data into validation and testing data (50% for each)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        # Load and preprocess images for test data\n        X_test_images = []\n        for img_path in X_test:\n            img = load_img(img_path, target_size=input_shape[:2])\n            img_array = img_to_array(img)\n            X_test_images.append(img_array)\n\n        # Convert lists to arrays for test data\n        X_test_images = np.array(X_test_images)\n        y_test = np.array(y_test)\n        \n        # Predict\n        y_pred = model.predict(X_test_images)\n        \n        # Inverse transform\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        # Calculate metrics\n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    # Calculate mean and standard deviation for metrics\n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    mean_recall = np.mean(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_precision = np.std(precisions)\n    std_dev_recall = np.std(recalls)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: model, spectrogram_images, OHE_Y, encoder, input_shape\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"execution":{"iopub.status.busy":"2024-05-22T11:09:39.946327Z","iopub.execute_input":"2024-05-22T11:09:39.946713Z","iopub.status.idle":"2024-05-22T11:09:51.638157Z","shell.execute_reply.started":"2024-05-22T11:09:39.946685Z","shell.execute_reply":"2024-05-22T11:09:51.637177Z"},"trusted":true},"execution_count":197,"outputs":[{"name":"stdout","text":"\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\n\u001b[1m30/30\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step\nMean Accuracy: 0.9972803347280335\nStandard Deviation of Accuracy: 0.001494022683795578\nMean Precision: 0.9973138629983817\nStandard Deviation of Precision: 0.0014316428874114654\nMean Recall: 0.9972829866672225\nStandard Deviation of Recall: 0.0015387110806844538\nMean F1 Score: 0.997288413170876\nStandard Deviation of F1 Score: 0.0014900037301819279\n","output_type":"stream"}]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Function to load and preprocess images\ndef load_and_preprocess_images(image_paths, target_size):\n    images = []\n    for img_path in image_paths:\n        img = load_img(img_path, target_size=target_size)\n        img_array = img_to_array(img)\n        img_array = preprocess_input(img_array)  # Preprocess for ResNet\n        images.append(img_array)\n    return np.array(images)\n\n# Function to inverse transform results\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred.reshape(-1, 1))\n    return y_pred\n\n# Load pre-trained ResNet50 model + higher level layers\ndef create_resnet_model(input_shape, num_classes):\n    base_model = ResNet50(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = Flatten()(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    predictions = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n\n    # Freeze the layers of the base model\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n\n# Function to unfreeze the last few layers of the base model for fine-tuning\ndef unfreeze_last_layers(model, num_layers):\n    for layer in model.layers[-num_layers:]:\n        if not isinstance(layer, Dense):\n            layer.trainable = True\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Function to predict and evaluate\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for _ in range(num_iterations):\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.20, shuffle=True)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        X_test_images = load_and_preprocess_images(X_test, target_size=input_shape[:2])\n        y_test = np.array(y_test)\n        \n        y_pred = model.predict(X_test_images)\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    std_dev_precision = np.std(precisions)\n    mean_recall = np.mean(recalls)\n    std_dev_recall = np.std(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: spectrogram_images, OHE_Y, encoder\ninput_shape = (224, 224, 3)  # ResNet input shape\nnum_classes = 3  # Assuming 3 classes\n\n# Convert OHE_Y to numpy array if it isn't already\nif not isinstance(OHE_Y, np.ndarray):\n    OHE_Y = np.array(OHE_Y)\n\nmodel = create_resnet_model(input_shape, num_classes)\n\n# Define callbacks\nearly_stop = EarlyStopping(monitor='val_loss', patience=10, verbose=1, restore_best_weights=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=1e-7, verbose=1)\n\n# Train the model\nX_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.20, shuffle=True)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n\nX_train_temp_images = load_and_preprocess_images(X_train_temp, target_size=input_shape[:2])\nX_valid_images = load_and_preprocess_images(X_valid, target_size=input_shape[:2])\n\n# Initial training of the top layers\nmodel.fit(X_train_temp_images, y_train_temp, batch_size=32, epochs=10, validation_data=(X_valid_images, y_valid), callbacks=[early_stop])\n\n\n# Perform predictions and evaluation\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\nimport os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Function to load and preprocess images\ndef load_and_preprocess_images(image_paths, target_size):\n    images = []\n    for img_path in image_paths:\n        img = load_img(img_path, target_size=target_size)\n        img_array = img_to_array(img)\n        img_array = preprocess_input(img_array)  # Preprocess for ResNet\n        images.append(img_array)\n    return np.array(images)\n\n# Function to inverse transform results\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred.reshape(-1, 1))\n    return y_pred\n\n# Load pre-trained ResNet50 model + higher level layers\ndef create_resnet_model(input_shape, num_classes):\n    base_model = ResNet50(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = Flatten()(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    predictions = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n\n    # Freeze the layers of the base model\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n\n# Function to unfreeze the last few layers of the base model for fine-tuning\ndef unfreeze_last_layers(model, num_layers):\n    for layer in model.layers[-num_layers:]:\n        if not isinstance(layer, Dense):\n            layer.trainable = True\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Function to predict and evaluate\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for _ in range(num_iterations):\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.30, shuffle=True)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        X_test_images = load_and_preprocess_images(X_test, target_size=input_shape[:2])\n        y_test = np.array(y_test)\n        \n        y_pred = model.predict(X_test_images)\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    std_dev_precision = np.std(precisions)\n    mean_recall = np.mean(recalls)\n    std_dev_recall = np.std(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: spectrogram_images, OHE_Y, encoder\ninput_shape = (224, 224, 3)  # ResNet input shape\nnum_classes = 3  # Assuming 3 classes\n\n# Convert OHE_Y to numpy array if it isn't already\nif not isinstance(OHE_Y, np.ndarray):\n    OHE_Y = np.array(OHE_Y)\n\nmodel = create_resnet_model(input_shape, num_classes)\n\n# Define callbacks\nearly_stop = EarlyStopping(monitor='val_loss', patience=10, verbose=1, restore_best_weights=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=1e-7, verbose=1)\n\n# Train the model\nX_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.30, shuffle=True)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n\nX_train_temp_images = load_and_preprocess_images(X_train_temp, target_size=input_shape[:2])\nX_valid_images = load_and_preprocess_images(X_valid, target_size=input_shape[:2])\n\n# Initial training of the top layers\nmodel.fit(X_train_temp_images, y_train_temp, batch_size=32, epochs=10, validation_data=(X_valid_images, y_valid), callbacks=[early_stop])\n\n# Unfreeze the last few layers and fine-tune the model\n\n# Perform predictions and evaluation\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n\nimport os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Function to load and preprocess images\ndef load_and_preprocess_images(image_paths, target_size):\n    images = []\n    for img_path in image_paths:\n        img = load_img(img_path, target_size=target_size)\n        img_array = img_to_array(img)\n        img_array = preprocess_input(img_array)  # Preprocess for ResNet\n        images.append(img_array)\n    return np.array(images)\n\n# Function to inverse transform results\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred.reshape(-1, 1))\n    return y_pred\n\n# Load pre-trained ResNet50 model + higher level layers\ndef create_resnet_model(input_shape, num_classes):\n    base_model = ResNet50(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = Flatten()(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    predictions = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n\n    # Freeze the layers of the base model\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n\n# Function to unfreeze the last few layers of the base model for fine-tuning\ndef unfreeze_last_layers(model, num_layers):\n    for layer in model.layers[-num_layers:]:\n        if not isinstance(layer, Dense):\n            layer.trainable = True\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Function to predict and evaluate\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for _ in range(num_iterations):\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.30, shuffle=True)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        X_test_images = load_and_preprocess_images(X_test, target_size=input_shape[:2])\n        y_test = np.array(y_test)\n        \n        y_pred = model.predict(X_test_images)\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    std_dev_precision = np.std(precisions)\n    mean_recall = np.mean(recalls)\n    std_dev_recall = np.std(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: spectrogram_images, OHE_Y, encoder\ninput_shape = (224, 224, 3)  # ResNet input shape\nnum_classes = 3  # Assuming 3 classes\n\n# Convert OHE_Y to numpy array if it isn't already\nif not isinstance(OHE_Y, np.ndarray):\n    OHE_Y = np.array(OHE_Y)\n\nmodel = create_resnet_model(input_shape, num_classes)\n\n# Define callbacks\nearly_stop = EarlyStopping(monitor='val_loss', patience=10, verbose=1, restore_best_weights=True)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=1e-7, verbose=1)\n\n# Train the model\nX_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.30, shuffle=True)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n\nX_train_temp_images = load_and_preprocess_images(X_train_temp, target_size=input_shape[:2])\nX_valid_images = load_and_preprocess_images(X_valid, target_size=input_shape[:2])\n\n# Initial training of the top layers\nmodel.fit(X_train_temp_images, y_train_temp, batch_size=32, epochs=10, validation_data=(X_valid_images, y_valid), callbacks=[early_stop])\n\n# Perform predictions and evaluation\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-22T13:48:43.921854Z","iopub.status.idle":"2024-05-22T13:48:43.922166Z","shell.execute_reply.started":"2024-05-22T13:48:43.922013Z","shell.execute_reply":"2024-05-22T13:48:43.922025Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# VGG16","metadata":{}},{"cell_type":"code","source":"import os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Function to load and preprocess images\ndef load_and_preprocess_images(image_paths, target_size):\n    images = []\n    for img_path in image_paths:\n        img = load_img(img_path, target_size=target_size)\n        img_array = img_to_array(img)\n        img_array = preprocess_input(img_array)  # Preprocess for VGG16\n        images.append(img_array)\n    return np.array(images)\n\n# Function to inverse transform results\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred.reshape(-1, 1))\n    return y_pred\n\n# Load pre-trained VGG16 model + higher level layers\ndef create_vgg16_model(input_shape, num_classes):\n    base_model = VGG16(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = Flatten()(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    predictions = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n\n    # Freeze the layers of the base model\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n\n# Function to unfreeze the last few layers of the base model for fine-tuning\ndef unfreeze_last_layers(model, num_layers):\n    for layer in model.layers[-num_layers:]:\n        if not isinstance(layer, Dense):\n            layer.trainable = True\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Function to predict and evaluate\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for _ in range(num_iterations):\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.20, shuffle=True)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        X_test_images = load_and_preprocess_images(X_test, target_size=input_shape[:2])\n        y_test = np.array(y_test)\n        \n        y_pred = model.predict(X_test_images)\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    std_dev_precision = np.std(precisions)\n    mean_recall = np.mean(recalls)\n    std_dev_recall = np.std(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: spectrogram_images, OHE_Y, encoder\ninput_shape = (224, 224, 3)  # VGG16 input shape\nnum_classes = 3  # Assuming 3 classes\n\n# Convert OHE_Y to numpy array if it isn't already\nif not isinstance(OHE_Y, np.ndarray):\n    OHE_Y = np.array(OHE_Y)\n\nmodel = create_vgg16_model(input_shape, num_classes)\n\n# Define callbacks\nearly_stop = EarlyStopping(monitor=' val_accuracy', patience=10, verbose=1, restore_best_weights=True)\n#reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=1e-7, verbose=1)\n\n# Train the model\nX_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.20, shuffle=True)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n\nX_train_temp_images = load_and_preprocess_images(X_train_temp, target_size=input_shape[:2])\nX_valid_images = load_and_preprocess_images(X_valid, target_size=input_shape[:2])\n\n# Initial training of the top layers\nmodel.fit(X_train_temp_images, y_train_temp, batch_size=32, epochs=10, validation_data=(X_valid_images, y_valid), callbacks=[early_stop])\n\n\n# Perform predictions and evaluation\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Function to load and preprocess images\ndef load_and_preprocess_images(image_paths, target_size):\n    images = []\n    for img_path in image_paths:\n        img = load_img(img_path, target_size=target_size)\n        img_array = img_to_array(img)\n        img_array = preprocess_input(img_array)  # Preprocess for VGG16\n        images.append(img_array)\n    return np.array(images)\n\n# Function to inverse transform results\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred.reshape(-1, 1))\n    return y_pred\n\n# Load pre-trained VGG16 model + higher level layers\ndef create_vgg16_model(input_shape, num_classes):\n    base_model = VGG16(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = Flatten()(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    predictions = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n\n    # Freeze the layers of the base model\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n\n# Function to unfreeze the last few layers of the base model for fine-tuning\ndef unfreeze_last_layers(model, num_layers):\n    for layer in model.layers[-num_layers:]:\n        if not isinstance(layer, Dense):\n            layer.trainable = True\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Function to predict and evaluate\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for _ in range(num_iterations):\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.30, shuffle=True)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        X_test_images = load_and_preprocess_images(X_test, target_size=input_shape[:2])\n        y_test = np.array(y_test)\n        \n        y_pred = model.predict(X_test_images)\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    std_dev_precision = np.std(precisions)\n    mean_recall = np.mean(recalls)\n    std_dev_recall = np.std(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: spectrogram_images, OHE_Y, encoder\ninput_shape = (224, 224, 3)  # VGG16 input shape\nnum_classes = 3  # Assuming 3 classes\n\n# Convert OHE_Y to numpy array if it isn't already\nif not isinstance(OHE_Y, np.ndarray):\n    OHE_Y = np.array(OHE_Y)\n\nmodel = create_vgg16_model(input_shape, num_classes)\n\n# Define callbacks\nearly_stop = EarlyStopping(monitor=' val_accuracy', patience=10, verbose=1, restore_best_weights=True)\n#reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=1e-7, verbose=1)\n\n# Train the model\nX_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.30, shuffle=True)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n\nX_train_temp_images = load_and_preprocess_images(X_train_temp, target_size=input_shape[:2])\nX_valid_images = load_and_preprocess_images(X_valid, target_size=input_shape[:2])\n\n# Initial training of the top layers\nmodel.fit(X_train_temp_images, y_train_temp, batch_size=32, epochs=10, validation_data=(X_valid_images, y_valid), callbacks=[early_stop])\n\n\n# Perform predictions and evaluation\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.vgg16 import VGG16, preprocess_input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Function to load and preprocess images\ndef load_and_preprocess_images(image_paths, target_size):\n    images = []\n    for img_path in image_paths:\n        img = load_img(img_path, target_size=target_size)\n        img_array = img_to_array(img)\n        img_array = preprocess_input(img_array)  # Preprocess for VGG16\n        images.append(img_array)\n    return np.array(images)\n\n# Function to inverse transform results\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred.reshape(-1, 1))\n    return y_pred\n\n# Load pre-trained VGG16 model + higher level layers\ndef create_vgg16_model(input_shape, num_classes):\n    base_model = VGG16(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = Flatten()(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    predictions = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n\n    # Freeze the layers of the base model\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n\n# Function to unfreeze the last few layers of the base model for fine-tuning\ndef unfreeze_last_layers(model, num_layers):\n    for layer in model.layers[-num_layers:]:\n        if not isinstance(layer, Dense):\n            layer.trainable = True\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Function to predict and evaluate\ndef predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape, num_iterations=10):\n    accuracies = []\n    precisions = []\n    recalls = []\n    f1_scores = []\n\n    for _ in range(num_iterations):\n        X_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.40, shuffle=True)\n        X_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n        \n        X_test_images = load_and_preprocess_images(X_test, target_size=input_shape[:2])\n        y_test = np.array(y_test)\n        \n        y_pred = model.predict(X_test_images)\n        Y_pred = inv_transform_result(y_pred, encoder)\n        Y_true = inv_transform_result(y_test, encoder)\n        \n        accuracy = accuracy_score(Y_true, Y_pred)\n        precision, recall, f1, _ = precision_recall_fscore_support(Y_true, Y_pred, average='macro')\n        \n        accuracies.append(accuracy)\n        precisions.append(precision)\n        recalls.append(recall)\n        f1_scores.append(f1)\n    \n    mean_accuracy = np.mean(accuracies)\n    std_dev_accuracy = np.std(accuracies)\n    mean_precision = np.mean(precisions)\n    std_dev_precision = np.std(precisions)\n    mean_recall = np.mean(recalls)\n    std_dev_recall = np.std(recalls)\n    mean_f1 = np.mean(f1_scores)\n    std_dev_f1 = np.std(f1_scores)\n    \n    return mean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1\n\n# Assume these variables are already defined: spectrogram_images, OHE_Y, encoder\ninput_shape = (224, 224, 3)  # VGG16 input shape\nnum_classes = 3  # Assuming 3 classes\n\n# Convert OHE_Y to numpy array if it isn't already\nif not isinstance(OHE_Y, np.ndarray):\n    OHE_Y = np.array(OHE_Y)\n\nmodel = create_vgg16_model(input_shape, num_classes)\n\n# Define callbacks\nearly_stop = EarlyStopping(monitor=' val_accuracy', patience=10, verbose=1, restore_best_weights=True)\n#reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=1e-7, verbose=1)\n\n# Train the model\nX_train_temp, X_test, y_train_temp, y_test = train_test_split(spectrogram_images, OHE_Y, test_size=0.40, shuffle=True)\nX_valid, X_test, y_valid, y_test = train_test_split(X_test, y_test, test_size=0.50, shuffle=True)\n\nX_train_temp_images = load_and_preprocess_images(X_train_temp, target_size=input_shape[:2])\nX_valid_images = load_and_preprocess_images(X_valid, target_size=input_shape[:2])\n\n\n# Fine-tuning the entire model with lower learning rate\nmodel.fit(X_train_temp_images, y_train_temp, batch_size=32, epochs=20, validation_data=(X_valid_images, y_valid), callbacks=[early_stop])\n\n# Perform predictions and evaluation\nmean_accuracy, std_dev_accuracy, mean_precision, std_dev_precision, mean_recall, std_dev_recall, mean_f1, std_dev_f1 = predict_and_evaluate(model, spectrogram_images, OHE_Y, encoder, input_shape)\n\nprint(\"Mean Accuracy:\", mean_accuracy)\nprint(\"Standard Deviation of Accuracy:\", std_dev_accuracy)\nprint(\"Mean Precision:\", mean_precision)\nprint(\"Standard Deviation of Precision:\", std_dev_precision)\nprint(\"Mean Recall:\", mean_recall)\nprint(\"Standard Deviation of Recall:\", std_dev_recall)\nprint(\"Mean F1 Score:\", mean_f1)\nprint(\"Standard Deviation of F1 Score:\", std_dev_f1)\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# iNCEPTIONNET","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport numpy as np\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3, preprocess_input\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Function to load and preprocess images\ndef load_and_preprocess_images(image_paths, target_size):\n    images = []\n    for img_path in image_paths:\n        img = load_img(img_path, target_size=target_size)\n        img_array = img_to_array(img)\n        img_array = preprocess_input(img_array)  # Preprocess for InceptionV3\n        images.append(img_array)\n    return np.array(images)\n\n# Function to inverse transform results\ndef inv_transform_result(y_pred, encoder):\n    y_pred = y_pred.argmax(axis=1)\n    y_pred = encoder.inverse_transform(y_pred.reshape(-1, 1))\n    return y_pred\n\n# Load pre-trained InceptionV3 model + higher level layers\ndef create_inception_model(input_shape, num_classes):\n    base_model = InceptionV3(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = Flatten()(x)\n    x = Dense(1024, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    predictions = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs=base_model.input, outputs=predictions)\n\n","metadata":{},"execution_count":null,"outputs":[]}]}